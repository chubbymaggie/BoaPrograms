ChangedMethodCallParamValues: output sum of int;
p: Project = input;

isfixing := false;
countMethodCalls := 0;
methodParamValuesStr: string;
# map of file names to the last revision of that file
files: map[string] of ChangedFile;

visit(p, visitor {
    
    before n: Project -> {
        ifall (i: int; !match(`^java$`, lowercase(n.programming_languages[i]))) stop;
    }
    
    before node: CodeRepository -> {
        if (node.kind != RepositoryKind.GIT) stop;
    }
    
	before node: Revision -> isfixing = isfixingrevision(node.log);
	before node: ChangedFile -> {
		# if this is a fixing revision and
		# there was a previous version of the file
		if (isfixing && haskey(files, node.name)) {
		    # count how many method calls were previously in the file
		    # build a string with method param values (previous)
			countMethodCalls = 0;
			methodParamValuesStr = "(";
			visit(getast(files[node.name]));
			lastCountMethodCalls := countMethodCalls;
            lastMethodParamValuesStr := methodParamValuesStr;

			# count how many method calls are currently in the file
			# build a string with method param values (current)
			countMethodCalls = 0;
			methodParamValuesStr = "(";
			visit(getast(node));

            # if changed parameter values of these method calls, output
            if (countMethodCalls == lastCountMethodCalls) {
                if (methodParamValuesStr != lastMethodParamValuesStr) {
                    ChangedMethodCallParamValues << 1;
                }
            }
		}
		if (node.change == ChangeKind.DELETED)
			remove(files, node.name);
		else
			files[node.name] = node;
		stop;
	}
	
	before node: Statement -> {
            if (node.kind == StatementKind.BLOCK) {
                    foreach (i: int; def(node.statements[i])) {
                        visit(node.statements[i], visitor {
                            before node: Statement -> {
                                if (node.kind == StatementKind.BLOCK) stop;
                            }
                            before node: Expression -> {
                                if (node.kind == ExpressionKind.METHODCALL) {
                                    countMethodCalls++;
		                            
		                            foreach (i: int; node.method_args[i]) {
		                               if (node.method_args[i].kind == ExpressionKind.LITERAL) {
                                            methodParamValuesStr = methodParamValuesStr + 
                                                  node.method_args[i].literal + ";";
		                               } 
		                            }
			                        methodParamValuesStr = methodParamValuesStr + ")";
                                }
                            }
                        });
                    }
                }
        }
	});
